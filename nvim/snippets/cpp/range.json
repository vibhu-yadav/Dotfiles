{
	"C++17 compliant range template": {
		"prefix": "range_iterator",
		"body": [
			"template <typename T>",
			"struct number_iterator {",
			"    using iterator_category = std::random_access_iterator_tag;",
			"    using value_type = T;",
			"    using difference_type = std::ptrdiff_t;",
			"    using pointer = T*;",
			"    using reference = T&;",
			"",
			"    T v;",
			"",
			"    number_iterator(T _v) : v(_v) {}",
			"",
			"    T operator*() const { return v; }",
			"",
			"    number_iterator& operator++() {",
			"        ++v;",
			"        return *this;",
			"    }",
			"",
			"    number_iterator operator++(int) {",
			"        number_iterator tmp = *this;",
			"        ++(*this);",
			"        return tmp;",
			"    }",
			"",
			"    number_iterator& operator--() {",
			"        --v;",
			"        return *this;",
			"    }",
			"",
			"    number_iterator operator--(int) {",
			"        number_iterator tmp = *this;",
			"        --(*this);",
			"        return tmp;",
			"    }",
			"",
			"    number_iterator& operator+=(difference_type n) {",
			"        v += n;",
			"        return *this;",
			"    }",
			"",
			"    number_iterator operator+(difference_type n) const {",
			"        return number_iterator(v + n);",
			"    }",
			"",
			"    number_iterator& operator-=(difference_type n) {",
			"        v -= n;",
			"        return *this;",
			"    }",
			"",
			"    number_iterator operator-(difference_type n) const {",
			"        return number_iterator(v - n);",
			"    }",
			"",
			"    difference_type operator-(const number_iterator& other) const {",
			"        return v - other.v;",
			"    }",
			"",
			"    bool operator==(const number_iterator& other) const { return v == other.v; }",
			"    bool operator!=(const number_iterator& other) const { return v != other.v; }",
			"    bool operator<(const number_iterator& other) const { return v < other.v; }",
			"    bool operator<=(const number_iterator& other) const { return v <= other.v; }",
			"    bool operator>(const number_iterator& other) const { return v > other.v; }",
			"    bool operator>=(const number_iterator& other) const { return v >= other.v; }",
			"",
			"    T operator[](difference_type n) const { return v + n; }",
			"};",
			"",
			"template <typename T>",
			"struct number_range {",
			"    T b, e;",
			"",
			"    number_range(T b, T e) : b(b), e(e) {}",
			"",
			"    number_iterator<T> begin() { return number_iterator<T>(b); }",
			"    number_iterator<T> end() { return number_iterator<T>(e); }",
			"};",
			"",
			"template <typename T>",
			"number_range<T> range(T e) {",
			"    return number_range<T>(0, e);",
			"}",
			"",
			"template <typename T>",
			"number_range<T> range(T b, T e) {",
			"    return number_range<T>(b, e);",
			"}"
		],
		"description": "c++17 compliant range template"
	},
	"deprecated range template": {
		"prefix": "range",
		"body": [
			"template <typename T>",
			"struct number_iterator : std::iterator<random_access_iterator_tag, T> {",
			"  T v;",
			"  number_iterator(T _v) : v(_v) {}",
			"  operator T &() { return v; }",
			"  T operator*() const { return v; }",
			"};",
			"",
			"template <typename T> struct number_range {",
			"  T b, e;",
			"  number_range(T b, T e) : b(b), e(e) {}",
			"  number_iterator<T> begin() { return b; }",
			"  number_iterator<T> end() { return e; }",
			"};",
			"",
			"template <typename T> number_range<T> range(T e) {",
			"  return number_range<T>(0, e);",
			"}",
			"template <typename T> number_range<T> range(T b, T e) {",
			"  return number_range<T>(b, e);",
			"}"
		],
		"description": "basic range template (std::iterator deprecated in c++17)"
	}
}
